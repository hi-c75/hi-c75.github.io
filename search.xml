<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git基本使用方法</title>
    <url>/2023/02/09/Git%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h1><h2 id="1-基本配置"><a href="#1-基本配置" class="headerlink" title="1. 基本配置"></a>1. 基本配置</h2><ol>
<li><p>设置用户信息</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;itcast&quot;</span></span><br><span class="line">git config --global user.name <span class="string">&quot;hello@itcast.cn&quot;</span></span><br></pre></td></tr></table></figure></div>

</li>
<li><p>查看配置信息</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name </span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
<h2 id="2-为指令配置别名"><a href="#2-为指令配置别名" class="headerlink" title="2. 为指令配置别名"></a>2. 为指令配置别名</h2><ol>
<li><p>打开用户目录，创建<code>.bashrc</code>文件</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> .bashrc</span><br></pre></td></tr></table></figure></div>

<p> 部分Windows用户系统不允许创建点好开头文件，则可使用一下命令</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> ~/.bashrc</span><br></pre></td></tr></table></figure></div></li>
<li><p>在<code>.bashrc</code>文件中输入一下内容：</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用于输出git日志</span></span><br><span class="line"><span class="built_in">alias</span> git-log=<span class="string">&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span></span><br><span class="line"><span class="comment">#用于输出当前目录所有文件及基本信息</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -al&#x27;</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>执行一下指令</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ../.bashrc</span><br></pre></td></tr></table></figure></div>

<p> 注：<code>../</code>表示上一级目录</p>
</li>
</ol>
<h2 id="3-配置公钥"><a href="#3-配置公钥" class="headerlink" title="3. 配置公钥"></a>3. 配置公钥</h2><ol>
<li><p>生成SSH公钥</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></div>

<p> 执行该命令后不断回车，注意，如果公钥已存在则自动覆盖</p>
</li>
<li><p>Gitee设置账户共公钥</p>
<p> 获取公钥</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></div>
<p> <img lazyload src="/images/loading.svg" data-src="1.webp" alt="Gitee设置"></p>
</li>
<li><p>验证是否配置成功</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置gitee</span></span><br><span class="line">ssh -T git@gitee.com</span><br><span class="line"><span class="comment">#配置github</span></span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="4-远程仓库"><a href="#4-远程仓库" class="headerlink" title="4. 远程仓库"></a>4. 远程仓库</h2><ol>
<li>添加远程仓库</li>
</ol>
  <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin SSH/HTTP</span><br></pre></td></tr></table></figure></div>

<p>  <img lazyload src="/images/loading.svg" data-src="2.webp" alt="SSH"></p>
<ol start="2">
<li><p>推送到远程仓库</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#[-f]强制覆盖  [--set-upstream]推送到远端的同时并且建立起和远端分支的关联关系</span></span><br><span class="line">git push -f --set-upstream origin master:master</span><br><span class="line"><span class="comment">#该命令可查看本地分支与远程分支的对应关系</span></span><br><span class="line">git branch -vv</span><br></pre></td></tr></table></figure></div></li>
<li><p>克隆远程仓库</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> SSH/HTTP [本地文件夹]</span><br></pre></td></tr></table></figure></div></li>
<li><p>从远程仓库拉取</p>
 <div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pull(拉取) = fetch(抓取) + merge(合并)</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></div>

</li>
</ol>
]]></content>
      <categories>
        <category>Git使用</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Hexo+GitHub-Pages博客搭建（一）</title>
    <url>/2023/02/09/%E5%9F%BA%E4%BA%8EHexo+GitHub-Pages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>个人博客搭建，网上教程繁多且详细，我根据网上教程搭建博客，但是搭建过程总会出现各种错误，为了更加详细以及复盘搭建博客的过程，我编写了以下文章。</p>
<ul>
<li>本文针对Windows10系统，其他诸如Mac系统还有Linux系统请参考百度相关内容。</li>
</ul>
<h1 id="Hexo的搭建步骤-1"><a href="#Hexo的搭建步骤-1" class="headerlink" title="Hexo的搭建步骤[^1]"></a>Hexo的搭建步骤[^1]</h1><h2 id="安装Git-Bash"><a href="#安装Git-Bash" class="headerlink" title="安装Git Bash"></a>安装Git Bash</h2><p><a class="link" href="https://git-scm.com/download/win">Git Bash <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（选择合适的版本下载，我的版本是<code>Git-2.33.1-64-bit.exe</code>）是用来管理Hexo博客文章，并将文章上传到GitHub平台的工具，具体安装步骤可参考<a class="link" href="https://blog.csdn.net/mukes/article/details/115693833">Git详细安装教程 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p>若右键打开<code>Git Bash Here</code>，输入<code>npm -v</code>出现以下情况:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ git -v</span><br><span class="line">bash: npm: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure></div>

<p>原因：<code>环境变量</code>未添加</p>
<p>解决步骤：</p>
<p>1）右键此电脑：<code>属性=&gt;高级系统设置=&gt;高级=&gt;环境变量</code>出现以下界面</p>
<p><img lazyload src="/images/loading.svg" data-src="1.webp" alt="环境变量"></p>
<p>2）<code>用户变量=&gt;编辑环境变量=&gt;新建</code>添加以下环境变量</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/mingw64/bin</span><br><span class="line">/usr/local/Git/bin</span><br></pre></td></tr></table></figure></div>

<p>注：其中<code>/usr/local/mingw64</code>（我的这个在C盘）、<code>/usr/local/Git</code>（我的这个在D盘）分别为安装Git文件夹，该路径请不要出现中文，否者会报错</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Hexo是基于<a class="link" href="https://nodejs.org/en/">Node.js <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>（复制到浏览器下载软件）编写的，所以需要安装该软件。从官网下载，然后安装即可，直接选择LTS（长期支持版）版本的。 安装完成后，打开<strong>管理员命令行</strong>输入命令 <code>node-v</code>以及 <code>npm-v</code>，查看有没有安装成功。</p>
<p><img lazyload src="/images/loading.svg" data-src="2.webp" alt="安装成功界面"></p>
<h3 id="报错-1"><a href="#报错-1" class="headerlink" title="报错"></a>报错</h3><p>若右键打开<code>Git Bash Here</code>，输入<code>npm -v</code>出现以下情况:</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm -v</span><br><span class="line">bash: npm: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure></div>

<p>原因：<code>环境变量</code>未添加</p>
<p>解决步骤：</p>
<p>1）右键此电脑：<code>属性=&gt;高级系统设置=&gt;高级=&gt;环境变量</code></p>
<p>2）<code>系统变量=&gt;编辑环境变量=&gt;新建</code>添加以下环境变量</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/node/node_global</span><br></pre></td></tr></table></figure></div>

<p>注：其中<code>/usr/local/node</code>为安装Node.js文件夹，该路径请不要出现中文，否者会报错</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>1）创建一个文件夹Blog，然后进入该文件夹右键<code>Git Bash Here</code>打开。输入命令 <code>npm install-g hexo-cli</code>，至此就安装完成了。</p>
<p>2）安装完成后，还需要初始化hexo，即执行如下命令：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></div>

<p>3）新建完成后，在Blog文件夹下会出现许多新的文件，目录如下：</p>
<ul>
<li>node_modules：依赖包</li>
<li>scaffolds：命令生成Markdown文章等的模板</li>
<li>source：用命令创建的各种Markdown文章</li>
<li>themes：主题文件夹，Hexo 会根据主题来生成静态页面</li>
<li>_config.yml：站点配置文件，您可以在此配置大部分的参数</li>
<li>db.json：source解析所得到的</li>
<li>package.json：项目所需模块项目的配置信息</li>
</ul>
<p>4）输入如下命令，然后在浏览器中输入 <code>localhost:4000</code>(本地查看)即可查看用Hexo生成的博客了。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="3.webp" alt="博客页面"></p>
<p>使用ctrl+c可以把服务关掉</p>
<p>5）至此，Blog文件夹下会多出两个目录</p>
<ul>
<li>.deploy_git</li>
<li>public</li>
</ul>
<h2 id="Hexo关联到GitHub"><a href="#Hexo关联到GitHub" class="headerlink" title="Hexo关联到GitHub"></a>Hexo关联到GitHub</h2><p>静态页面已经有了，还需要将其部署到GitHub上。一来博客可以以链接形式被访问到，二来可以有个托管平台，这样就可以关注博客内容本身而不是麻烦的管理。</p>
<h3 id="GitHub创建个人仓库-2"><a href="#GitHub创建个人仓库-2" class="headerlink" title="GitHub创建个人仓库[^2]"></a>GitHub创建个人仓库[^2]</h3><p>（1）注册一个GitHub账号</p>
<p>（2）点击New，新建仓库</p>
<p>按照下图所示操作后，点击<code>Create repository</code>即创建成功。由于我已创建过，下图仓库名称重复出错。</p>
<p><img lazyload src="/images/loading.svg" data-src="4.webp" alt="创建仓库"></p>
<h3 id="生成SSH添加到GitHub"><a href="#生成SSH添加到GitHub" class="headerlink" title="生成SSH添加到GitHub"></a>生成SSH添加到GitHub</h3><p>（1）在<code>git bash</code>输入如下命令</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>（2）创建SSH，一路回车</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>这个时候会生成了.ssh的文件夹。在电脑中找到这个文件夹后可以发现有两个文件（一般位于C盘），如下图所示：</p>
<p><img lazyload src="/images/loading.svg" data-src="5.webp" alt="密钥文件"></p>
<p>（3）记事本打开<code>id_rsa.pub</code>复制其中的密钥内容，将其粘贴至如下位置</p>
<p><img lazyload src="/images/loading.svg" data-src="6.webp" alt="粘贴密钥"></p>
<h3 id="Hexo部署到GitHub"><a href="#Hexo部署到GitHub" class="headerlink" title="Hexo部署到GitHub"></a>Hexo部署到GitHub</h3><p>（1）用<code>vscode</code>（当然也可以用其他软件打开，我用的是<code>vscode</code>）打开站点配置文件<code>_config.yml</code>。搜索关键词（<code>crtl+f</code>）<code>deploy</code>，改成如下所示：</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 注意这里每个参数`:`后都有一个间距的空格，否者会报错</span></span><br><span class="line"><span class="attr">deploy:</span> </span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/YourgithubName/YourgithubName.github.io.git</span>  <span class="comment"># 你的仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment"># 这里不应该用master,而是用main，很多团队已经重命名他们的默认主干名为 main . 这是因为2020 年非裔男子乔治·弗洛伊德因白人警察暴力执法惨死而掀起的 Black Lives Matter(黑人的命也是命)运动，很多人认为 master 不尊重黑人，呼吁改为 main.</span></span><br></pre></td></tr></table></figure></div>

<p>（2）这个时候需要先安装<code>deploy-git</code> ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>

<p>（3）创建博客文章</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n bolgname</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="7.webp" alt="创建文章"></p>
<p>之后可以发现<code>Blog/source/_posts</code>目录下出现一个名为<code>test</code>的<code>Markdown</code>文章，用<a href>Typora</a>软件打开，文件最上方以 <code>---</code> 分隔的区域，有用于指定个别文件的变量的<code>Front-matter</code>。开始可使用几个基本参数：<code>title</code>，<code>author</code>，<code>date</code>，<code>tags</code>，<code>categories</code>，如下所示：</p>
<p><img lazyload src="/images/loading.svg" data-src="8.webp" alt="Front-matter参数"></p>
<p>用Typora打开模板文件<code>Blog/scaffolds/post.md</code>文件，可以进行相应的设置。</p>
<p><code>Blog/scaffolds</code>目录，其实该目录下一共有三个文件，刚刚只提到了post.md，还有另外两个文件。</p>
<p><img lazyload src="/images/loading.svg" data-src="13.webp" alt="scaffolds目录"><br>然后这三个文件是对应三种不同的布局（layout)。</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n [layout] &lt;tittle&gt; <span class="comment"># 之前在创建文章时，layout默认是post，名为title的文章在Blog/source/_posts文件夹下</span></span><br><span class="line">hexo n draft &lt;tittle&gt; <span class="comment"># draft是草稿的意思，名为title的文章在Blog/source/_drafts文件夹下，</span></span><br><span class="line">hexo s --draft <span class="comment"># 草稿写好文章后，可以在本地开启预览</span></span><br><span class="line">hexo p draft &lt;tittle&gt; <span class="comment"># 将名为title的文章发送到Blog/source/_posts文件夹下</span></span><br><span class="line">hexo new page board <span class="comment"># 系统会自动在source文件夹下创建一个board文件夹，以及board文件夹中的index.md，这样你访问的board对应的链接就是http://xxx.xxx/board</span></span><br></pre></td></tr></table></figure></div>

<p>（4）然后使用以下命令部署文章到GitHub</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g  <span class="comment"># 生成静态文章</span></span><br><span class="line">hexo d  <span class="comment"># 部署文章</span></span><br><span class="line"><span class="comment">## 以上两个命令可合成为一个使用</span></span><br><span class="line">hexo g --d</span><br><span class="line"></span><br><span class="line"><span class="comment">## 部署文章前可先在本地预览效果</span></span><br><span class="line">hexo s  <span class="comment"># 本地(localhost:4000)预览效果</span></span><br></pre></td></tr></table></figure></div>

<p>至此，<code>Hexo+GitHub-pages</code>搭建博客基本框架搭建完毕，<a href="/2023/02/09/%E5%9F%BA%E4%BA%8EHexo+GitHub-Pages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89/" title="基于Hexo-GitHub-Pages博客搭建（二）">基于Hexo-GitHub-Pages博客搭建（二）</a>将进一步完善博客内容。</p>
<h1 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h1><h2 id="绑定域名-3"><a href="#绑定域名-3" class="headerlink" title="绑定域名[^3]"></a>绑定域名[^3]</h2><p>虽然在Internet上可以访问的网站，但是网址是GitHub提供的:<code>http://username.github.io </code>,而想使用个性化域名，这就需要绑定的域名。这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。</p>
<p><strong>（1）创建解析</strong></p>
<p>登录到阿里云，进入管理控制台的域名列表，找到个性化域名，进入解析</p>
<p><img lazyload src="/images/loading.svg" data-src="9.webp" alt="域名解析"></p>
<p>添加解析</p>
<p><img lazyload src="/images/loading.svg" data-src="10.webp" alt="添加解析"></p>
<p>包括添加两条解析记录，185.199.111.153是GitHub的地址，你也可以<a class="link" href="https://ping.chinaz.com/">ping <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>你的 <code>http://username.github.io</code>的ip地址，填入进去。第二个记录类型是CNAME，CNAME的记录值是：<code>username.github.io</code> 这里千万别弄错了。</p>
<p><strong>（2）输入域名</strong></p>
<p>登录GitHub，进入之前创建的仓库，点击<code>settings</code>，设置<code>Custom domain</code>，输入你的域名：</p>
<p><img lazyload src="/images/loading.svg" data-src="11.webp" alt="设置域名"></p>
<p>点击save保存。</p>
<p><strong>（3）创建CNAME文件</strong></p>
<p>进入本地博客文件夹 ，进入<code>blog/source</code>目录下，创建一个记事本文件，输入域名。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。这里我是不带有www：</p>
<p><img lazyload src="/images/loading.svg" data-src="12.webp" alt="CNAME文件设置"></p>
<p>保存，命名为CNAME （<code>注意该文件不要添加扩展名称，如.txt</code>）</p>
<p>这时在Git Bash中输入以下命令，后可直接使用CNAME文件中设置的域名打开</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g --d</span><br></pre></td></tr></table></figure></div>

<h2 id="Hexo常用命令-3"><a href="#Hexo常用命令-3" class="headerlink" title="Hexo常用命令[^3]"></a>Hexo常用命令[^3]</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo -g  <span class="comment"># 安装Hexo</span></span><br><span class="line">npm update hexo -g  <span class="comment"># 升级</span></span><br><span class="line">hexo init  <span class="comment"># 初始化博客</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 命令简写</span></span><br><span class="line">hexo n Bolgname == hexo new Bolgname  <span class="comment"># 新建文章</span></span><br><span class="line">hexo g == hexo generate  <span class="comment"># 生成</span></span><br><span class="line">hexo s == hexo server  <span class="comment"># 启动服务预览</span></span><br><span class="line">hexo d == hexo deploy  <span class="comment"># 部署</span></span><br><span class="line"></span><br><span class="line">hexo server  <span class="comment"># Hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class="line">hexo server -s  <span class="comment"># 静态模式</span></span><br><span class="line">hexo server -p 5000  <span class="comment"># 更改端口</span></span><br><span class="line">hexo server -i 192.168.1.1  <span class="comment"># 自定义 IP</span></span><br><span class="line">hexo clean  <span class="comment"># 清除缓存，若是网页正常情况下可以忽略这条命令</span></span><br></pre></td></tr></table></figure></div>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[^1]: <a class="link" href="https://zhuanlan.zhihu.com/p/158975269">基于Hexo和GitHub免费搭建个人博客网站 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>[^2]: <a class="link" href="https://zhuanlan.zhihu.com/p/369486197">还不会使用 GitHub ？ GitHub 教程来了！万字图文详解 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>[^3]: <a class="link" href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github pages</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Hexo+GitHub-Pages博客搭建（二）</title>
    <url>/2023/02/09/%E5%9F%BA%E4%BA%8EHexo+GitHub-Pages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Hexo的基本页面配置"><a href="#Hexo的基本页面配置" class="headerlink" title="Hexo的基本页面配置"></a>Hexo的基本页面配置</h1><h2 id="Hexo基本配置"><a href="#Hexo基本配置" class="headerlink" title="Hexo基本配置"></a>Hexo基本配置</h2><p>用<code>vscode</code>打开站点配置文件<code>_config.yml</code>，我们可以在 <code>_config.yml</code>中修改大部分的配置具体参数信息可参考<a class="link" href="https://hexo.io/zh-cn/docs/configuration">Hexo官网配置 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>。</p>
<h2 id="更换主题-1"><a href="#更换主题-1" class="headerlink" title="更换主题[^1]"></a>更换主题[^1]</h2><p>系统默认给的主题是 <code>landscape</code>，并且在<a class="link" href="https://hexo.io/themes/">Hexo主题官网 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>还提供了376个主题（未来依旧会更新更多主题），可以先预览选择一个主题，如下所示：</p>
<p><img lazyload src="/images/loading.svg" data-src="1.webp" alt="主题官网"></p>
<p>首先你需要找到你喜欢的主题下载地址，一般可以点击相应的主题首页拉至最下方，会有个主题下载地址，下图演示的是<code>redefine</code>主题下载地址位置。</p>
<p><img lazyload src="/images/loading.svg" data-src="2.webp" alt="主题下载地址"></p>
<p>打开该主题GitHub地址，复制该地址。</p>
<p><img lazyload src="/images/loading.svg" data-src="3.webp" alt="GitHub下载地址"></p>
<p>之后打开博客根目录下如下图所示的主题文件夹：</p>
<p><img lazyload src="/images/loading.svg" data-src="4.webp" alt="根目录文件夹"></p>
<p>打开后在文件夹里右键<code>Git Bash Here</code>，输入以下指令（以下为<code>redefine</code>主题下载指令，可将该地址替换为其他主题下载地址）：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/EvanNotFound/hexo-theme-redefine.git</span><br></pre></td></tr></table></figure></div>

<p>下载完成后，你就可以看到<code>themes</code>文件夹下出现了一个新的名为<code>redefine</code>文件夹，这个就是我们刚刚下载的主题。返回根目录下找到<code>_config.yml</code>文件夹，用<code>vscode</code>打开，按<code>ctrl+f</code>搜索<code>theme</code>，更改其属性值为<code>redefine</code>（这个属性值是为你下载主题的名称），如下图所示：</p>
<p><img lazyload src="/images/loading.svg" data-src="5.webp" alt="站点配置修改"></p>
<h2 id="主题内容修改"><a href="#主题内容修改" class="headerlink" title="主题内容修改"></a>主题内容修改</h2><p>打开<code>theme</code>文件夹下所下载的主题文件夹，找到<code>_config.yml</code>文件并打开，具体修改内容可查看该文档：<a class="link" href="https://redefine-docs.ohevan.com/docs/intro">项目介绍  <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>，虽然该文档为<code>redefine</code>主题内容设置，但大部分主题参数修改类似，可以参考该文档进行修改，也可以自行百度查看具体修改方法。</p>
<h1 id="文章编写"><a href="#文章编写" class="headerlink" title="文章编写"></a>文章编写</h1><h2 id="创建与发布"><a href="#创建与发布" class="headerlink" title="创建与发布"></a>创建与发布</h2><p>创建文章：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n Bolgname</span><br></pre></td></tr></table></figure></div>

<p>对文章编辑完后使用以下指令发布：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>

<p>注：文章编写可使用<a class="link" href="https://pan.baidu.com/s/1fhP7Us6lgelyiJCALvaDPg">Typora <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> ，该版本存在过期问题，可根据该方法解决：<a class="link" href="https://blog.csdn.net/fxzzq/article/details/126079116">Typora 0.11.18 Beta版过期解决 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="文章站内引用-2"><a href="#文章站内引用-2" class="headerlink" title="文章站内引用[^2]"></a>文章站内引用[^2]</h2><p>若要在博客文章中引用自己的文章，需要使用以下指令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link 文件名(不要后缀) 文章别名(可选) %&#125;</span><br></pre></td></tr></table></figure></div>

<p>例如我需要在文章中引用我这篇<code>基于Hexo+GitHub-Pages博客搭建（一）</code>文章，则需要使用以下指令：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link 基于Hexo+GitHub-Pages博客搭建（一） %&#125;</span><br></pre></td></tr></table></figure></div>

<p>效果如下所示：<a href="/2023/02/09/%E5%9F%BA%E4%BA%8EHexo+GitHub-Pages%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89/" title="基于Hexo+GitHub-Pages博客搭建（一）">基于Hexo+GitHub-Pages博客搭建（一）</a></p>
<h1 id="下载插件推荐"><a href="#下载插件推荐" class="headerlink" title="下载插件推荐"></a>下载插件推荐</h1><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">作用</th>
<th align="center">指令</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>APalyer</code>[^3]</td>
<td align="center">音乐播放器</td>
<td align="center"><code>npm install --save hexo-tag-aplayer</code></td>
</tr>
<tr>
<td align="center"><code>DPlayer</code>[^4]</td>
<td align="center">视频播放器</td>
<td align="center"><code>npm install --save hexo-tag-dplayer</code></td>
</tr>
<tr>
<td align="center"><code>asset-image</code>[^5]</td>
<td align="center">修改图片插入路径</td>
<td align="center"><code>npm install hexo-asset-image --save</code></td>
</tr>
</tbody></table>
<p>注：所有指令均在博客根目录下运行</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[^1]: <a class="link" href="https://www.jianshu.com/p/9f794db64f42">Hexo的主题更换与使用教程 - 简书 (jianshu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>[^2]: <a class="link" href="https://www.mls-tech.info/hexo/hexo-use-internal-link/">如何在Hexo的博文中引用自己的文章 | Morning Star’s blog (mls-tech.info) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>theme</tag>
      </tags>
  </entry>
</search>
